library(DESeq2)
library(tidyverse)

## import data 
sampleinfo <- read_tsv("samples.txt")
seqdata <- read_tsv("counts.txt", comment="#")

## reformat data
countdata <- seqdata %>%
    as.data.frame() %>% 
    column_to_rownames("Geneid") %>% # turn the geneid column into rownames
    select(sampleinfo$sample) %>% # keep sample columns using sampleinfo$Sample
    as.matrix()

library(ggfortify)
library(gplots)
library(RColorBrewer)
library(biomaRt)
library(ComplexHeatmap)
library(circlize)
library(fgsea)
library(labeling)
library(ggplot2)

## remove non-expressed genes
keep <- rowSums(countdata) > 5
countdata <- countdata[keep,]

## bar plots library size
librarySizes <- colSums(countdata)
png(file="BarPlot.png", width=1200, height=1200)
barplot(librarySizes, 
        names=names(librarySizes), 
        las=2, 
        main="Barplot of library sizes")
abline(h=5.0e6, lty=2)
dev.off()

logcounts <- log2(countdata + 1)

# make a colour vector
statusCol <- match(sampleinfo$status, c(unique(sampleinfo$status))) + 1


#the density plot for read counts
png(file="Density.png", width=1200, height=1200)
nsamples <- ncol(countdata)
col <- brewer.pal(nsamples, "Paired")
col <- col(nsamples)
par(mfrow=c(1,2))
lcpm1 <- logcounts[,1:8]
plot(density(lcpm1[,1]), col=col[1], lwd=2, ylim=c(0,0.26), las=2, main="", xlab="")
title(main="A. Responder", xlab="Log-cpm")
for (i in 2:nsamples){
    den <- density(lcpm1[,i])
    lines(den$x, den$y, col=col[i], lwd=2)
}
legend("topright", colnames(countdata[,1:8]), text.col=col,cex=0.5, bty="n")
lcpm2 <- logcounts[,9:18]
plot(density(lcpm2[,1]), col=col[1], lwd=2, ylim=c(0,0.26), las=2, main="", xlab="")
title(main="B. Nonresponder", xlab="Log-cpm")
for (i in 2:nsamples){
    den <- density(lcpm2[,i])
    lines(den$x, den$y, col=col[i], lwd=2)
}
legend("topright", colnames(countdata[,9:18]), text.col=col,cex=0.5, bty="n")
dev.off()

## make a heatmap of correlation matrix now
cormat <- round(cor(logcounts, method = c("pearson")),2)
res <- rcorr(as.matrix(cormat)) #calculate the p value for each correlation coefficient
res$p #check the value  
ha_column = HeatmapAnnotation(df = data.frame(status = c(rep("responder", 8), rep("nonresponder", 10))),
                              col = list(status = c("responder" =  "orange", "nonresponder" = "purple")))
Heatmap(cormat, name = "PCC", column_title = "Pearson Correlation Matrix", top_annotation = ha_column)




# Check distributions of samples using boxplots
png(file="BoxCounts.png", width=1200, height=1200)
boxplot(logcounts, 
        xlab="", 
        ylab="Log2(Counts)",
        las=2,
        col=statusCol)
# Let's add a blue horizontal line that corresponds to the median logCPM
abline(h=median(as.matrix(logcounts)), col="blue")
dev.off()

## PCA plots
rlogcounts <- rlog(countdata)
# run PCA
pcDat <- prcomp(t(rlogcounts))
# plot PCA
png(file="PCA12.png", width=1200, height=1200)
autoplot(pcDat, data = sampleinfo, fill="status", shape=21, size=5) + scale_shape_manual(values=c(21)) + guides(fill = guide_legend(override.aes=list(shape=21)))
dev.off()
png(file="PCA23.png", width=1200, height=1200)
autoplot(pcDat, data = sampleinfo, fill="status", shape=21, size=5, x=2, y=3) + scale_shape_manual(values=c(21)) + guides(fill = guide_legend(override.aes=list(shape=21)))
dev.off()
png(file="PCA13.png", width=1200, height=1200)
autoplot(pcDat, data = sampleinfo, fill="status", shape=21, size=5, x=1, y=3) + scale_shape_manual(values=c(21)) + guides(fill = guide_legend(override.aes=list(shape=21)))
dev.off()

## Analyse data
design <- as.formula(~ batch + status)
sampleinfo$status <- factor(sampleinfo$status, levels = c(rev(unique(sampleinfo$status))))
modelMatrix <- model.matrix(design, data = sampleinfo)
ddsObj.raw <- DESeqDataSetFromMatrix(countData = countdata, colData = sampleinfo, design = design)
ddsObj <- DESeq(ddsObj.raw)
res <- results(ddsObj, alpha=0.05)

dds <- estimateSizeFactors(ddsObj.raw)
sizeFactors(dds)
normalized_counts <- counts(dds, normalized=TRUE)
write.table(normalized_counts, file="normalized_counts.txt", sep="\t", quote=F, col.names=NA)


## Annoate
#ensembl=useMart("ENSEMBL_MART_ENSEMBL", host="www.ensembl.org")
ensembl=useMart("ENSEMBL_MART_ENSEMBL", host="useast.ensembl.org")
ensembl = useDataset("hsapiens_gene_ensembl", mart=ensembl)
attributeNames <- c('ensembl_gene_id', 'entrezgene_id', 'external_gene_name', 'description', 'gene_biotype', 'chromosome_name', 'start_position', 'end_position', 'strand')
ourFilterType <- "ensembl_gene_id"
filterValues <- rownames(res)
annot <- getBM(attributes=attributeNames, filters = ourFilterType, values = filterValues, mart = ensembl)
names(annot) <- c("GeneID", "Entrez", "Symbol", "Description", "Biotype", "Chr", "Start", "End", "Strand")
resannot <- as.data.frame(res) %>% 
    rownames_to_column("GeneID") %>% 
    left_join(annot, "GeneID") %>% 
    rename(logFC=log2FoldChange, FDR=padj)
    

## export results
resannotsort <- resannot[order(resannot$FDR),]
write.table(resannotsort, file="Gene_DE.txt", sep="\t", quote=FALSE, row.names=FALSE, col.names=TRUE)

## P values histogram
png(file="Phist.png", width=1200, height=1200)
hist(resannot$pvalue)
dev.off()


resannot <- resannot[!duplicated(resannot$Entrez), ]
resannot<-resannot %>% dplyr::filter(!is.na(FDR) & !is.na(Entrez))


## MA Plot
cutoff <- sort(resannot$pvalue)[10]
resannot2 <- resannot %>% 
    mutate(TopGeneLabel=ifelse(pvalue<=cutoff, Symbol, ""))
png(file="MAplot.png", width=1200, height=1200)
ggplot(resannot2, aes(x = log2(baseMean), y=logFC)) + 
    geom_point(aes(colour=pvalue < 0.01), shape=20, size=0.5) +
    geom_text(aes(label=TopGeneLabel)) +
    labs(x="mean of normalised counts", y="log fold change")
dev.off()

## A better Volcano Plot template
library(ggrepel)

cutoff <- sort(resannot$FDR)[20]
png(file="Volcanoplot.png", width=1200, height=1200)
ggplot(data = resannot, aes(x = logFC, y = -log10(FDR))) +
  geom_point(data = subset(resannot), aes(size = abs(logFC)), color = "black", alpha = 0.1) +
  geom_point(data = subset(resannot, resannot$FDR<0.05 & resannot$logFC > 2), aes(size = abs(logFC)), color = "red", alpha = 0.1) +
  geom_point(data = subset(resannot, resannot$FDR<0.05 & resannot$logFC < -2), aes(size = abs(logFC)), color = "darkgreen", alpha = 0.1) +
  geom_hline(yintercept = -log10(0.05),lty = 4, lwd = 0.6, alpha = 0.8) +
  geom_vline(xintercept = c(1, -1), lty = 4, lwd = 0.6, alpha = 0.8) +
  theme_bw() +
  theme(panel.border = element_blank(),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.line = element_line(colour = "black")) +
  labs(x = "log2 (fold change)", y = "-log10 (FDR)") +
  theme(legend.position = 'none') +
  geom_text_repel(data = subset(resannot, resannot$FDR< cutoff), aes(label = Symbol), col = "black", alpha = 0.8)	
dev.off()

#a large heatmap 
sigGenes1 <- as.data.frame(resannot) %>% filter(pvalue < 0.01) %>% filter(abs(logFC) > 1) %>% pull("GeneID")
sigGenes1 <- sigGenes1[1:200]
Nsig1 <- length(sigGenes1)
   
plotDat <- vst(ddsObj)[sigGenes1,] %>% assay()
z.mat <- t(scale(t(plotDat), center=TRUE, scale=TRUE))


myPalette <- c("blue3", "white", "red")
myRamp = colorRamp2(c(-2, 0, 2), myPalette)

hcDat <- hclust(dist(z.mat))
cutGroups <- cutree(hcDat, h=4)
ha1 = ha_column = HeatmapAnnotation(df = data.frame(status = c(rep("responder", 6), rep("nonresponder", 10))),
                              col = list(status = c("responder" =  "orange", "nonresponder" = "purple")))

GeneClusters <- as.data.frame(unlist(cutGroups))
GeneClusters$GeneID <- names(cutGroups)
write.table(GeneClusters, file="GeneClusters.txt", sep="\t", quote=FALSE, row.names=FALSE, col.names=TRUE)

png(file="Heatmap.png", width=1600, height=400+Nsig1*6)
print(Heatmap(z.mat, name = "z-score",
        col = myRamp,            
        show_row_name = FALSE,
        cluster_columns = TRUE,
        rect_gp = gpar(col = "darkgrey", lwd=0.5),
        top_annotation = ha1))
    dev.off()
